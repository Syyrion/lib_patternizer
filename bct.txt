    // Stack: 1 1 1 0 0    -1    1 0 1

0 -1 -1 roll
    // Stack: 0    1 1 1 0 0    -1    1 0 1

dup -1 !=
    // Stack: 0    1 1 1 0 0    -1    1 0 1 1

while
    // Stack: 0    1 1 1 0 0    -1    1 0 1

    -1 1 roll
    1 +
    -1 -1 roll

    // Stack: 1    1 1 1 0 0    -1    1 0 1

    -2 -1 roll

    // Stack: 1    1   1 1 1 0 0    -1    1 0

    dup -1 !=
end

    // Stack: 3    1 0 1   1 1 1 0 0    -1

-1 1 roll
    // Stack: 1 0 1   1 1 1 0 0    -1    3

dup 0 ==
    // Stack: 1 0 1   1 1 1 0 0    -1    3 0

if return end // Exit if data block is empty
    // Stack: 1 0 1   1 1 1 0 0    -1    3

dup -1 -1 roll
    // Stack: 3    1 0 1   1 1 1 0 0    -1    3

-2 swap
    // Stack: 3    1 0 1   1 1 1 0 0    -1    -2 3

roll
    // Stack: 3    1 1 1 0 0    -1    1 0 1

// Item at -1 is length of data block





0 -2 -1 roll
    // Stack: 3    0    1 1 1 0 0    -1    1 0 1

-3 1 roll
    // Stack: 3    0    1 1 0 0    -1    1 0 1    1

dup -1 !=
while
    -2 1 roll
    1 +
    -2 -1 roll

    -3 1 roll

    dup -1 !=
end
    // Stack: 3    5    1 0 1    1 1 1 0 0    -1

drop
    // Stack: 3    5    1 0 1    1 1 1 0 0

-2 1 roll
    // Stack: 3    1 0 1    1 1 1 0 0    5

dup 0 ==
    // Stack: 3    1 0 1    1 1 1 0 0    5 0

if return end
    // Stack: 3    1 0 1    1 1 1 0 0    5

dup -2 -1 roll
    // Stack: 3    5    1 0 1    1 1 1 0 0    5

-1 * -3 swap
    // Stack: 3    5    1 0 1    1 1 1 0 0    -3 -5

roll
    // Stack: 3    5    1 1 1 0 0    1 0 1


// Item at -2 is the program length




1 while
    -2 1 roll
    dup
    -2 -1 roll
        // Stack: 3    5    1 1 1 0 0    1 0 1    5
    -3 swap roll
        // Stack: 3    5    1 0 1    1 1 1 0 0

    dup
        // Stack: 3    5    1 0 1    1 1 1 0 0    0
    dup
    if
        -3 -1 roll
        over
        -3 1 roll
        +
    end

    -3 -1 roll
        // Stack: 3    5    0    1 0 1    1 1 1 0 0

    -2 1 roll
    dup
    -2 -1 roll
        // Stack: 3    5    0    1 0 1    1 1 1 0 0    5

    -1 roll
        // Stack: 3    5    0    1 0 1    0 1 1 1 0

    -2 1 roll
    dup
    -2 -1 roll
        // Stack: 3    5    0    1 0 1    0 1 1 1 0    5

    -1 * -4 swap
        // Stack: 3    5    0    1 0 1    0 1 1 1 0    -4 -5

    roll
        // Stack: 3    5    0    0 1 1 1 0    1 0 1



    -3 1 roll
        // Stack: 3    5    0 1 1 1 0    1 0 1    0


    dup 0 ==
    if
        drop
        drop
            // Stack: 3    5    0 1 1 1 0    1 0 
        -1 1 roll
        1 -
        dup 0 ==
        if return end
        -1 -1 roll
            // Stack: 2    5    0 1 1 1 0    1 0 
    else
            // Stack: 3    5    0 1 1 1 0    1 0 1    X
        1 -
            // Stack: 3    5    0 1 1 1 0    1 0 1    X-1

        -1 1 roll
        1 +
        dup
        -1 -1 roll
            // Stack: 4    5    0 1 1 1 0    1 0 1    X-1    4
        -1 roll
            // Stack: 4    5    0 1 1 1 0    X-1 1 0 1
    end
    1
end












======

// Find length of the data block
0 -1 -1 roll
dup -1 !=
while
    -1 1 roll
    1 +
    -1 -1 roll

    -2 -1 roll

    dup -1 !=
end

// Exit if data block is empty
-1 1 roll
dup 0 ==
if return end
dup -1 -1 roll

// Reset orientation
-2 swap
roll

// Find length of program block
0 -2 -1 roll
-3 1 roll
dup -1 !=
while
    -2 1 roll
    1 +
    -2 -1 roll

    -3 1 roll

    dup -1 !=
end
drop

// Exit if program block is empty
-2 1 roll
dup 0 ==
if return end
dup -2 -1 roll

// Reset orientation
-1 * -3 swap
roll


1 while
    // Bring up program
    -2 1 roll
    dup
    -2 -1 roll
    -3 swap roll

    // Copy command
    dup
    // Determine command type
    dup
    if
        -3 -1 roll
        over
        -3 1 roll
        +
    end

    // Save command
    -3 -1 roll

    // Roll the program block
    -2 1 roll
    dup
    -2 -1 roll
    -1 roll

    // Reset orientation
    -2 1 roll
    dup
    -2 -1 roll
    -1 * -4 swap
    roll

    // Bring command back to top
    -3 1 roll

    // Perform operation
    dup 0 ==
    if
        // Delete command value and last entry in data block
        drop
        drop

        // Update data block length and exit if it's 0
        -1 1 roll
        1 -
        dup 0 ==
        if return end
        -1 -1 roll
    else
        // Subtract 1 to get a 1 or 0 to insert
        1 -

        // Update and insert data entry
        -1 1 roll
        1 +
        dup
        -1 -1 roll
        -1 roll
    end
    1
end